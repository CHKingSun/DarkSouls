# Flver File Format
// Based on DSI Templates
// Note: this is just a format description with no parts contacted.

## Structs

//TODO problem with value and unknown_id value
struct HitBox {
	Vec3 row1;
	ushort unknown_id1; //Most of it is 0, 33023(80FF), 51300(C864), 25700(6464), 255(00FF)
	ushort unknown_id2; //Most of it is 0XFF00 65280
	Vec3 row2;
	ushort unknown_id3;
	ushort unknown_id4;
	Vec3 row3;
	ushort unknown1; //Always 0XFFFF
	ushort unknown2; //Always 0X0100
	byte skip[16];

	bool operator()() {
		//if (unknown_id1 != 0) Log::info("hit_box.unknown_id1 is ", unknown_id1);
		//if (unknown_id2 != 0XFF00) Log::info("hit_box.unknown_id2 is ", unknown_id2);
		return unknown1 == 0XFFFF
			&& unknown2 == 0X0100
			&& std::all_of(skip, skip + 16, [](const byte& a) { return a == 0; });
	}
};

struct MaterialHeader {
	uint mtl_name_offset;
	uint mtd_filename_offset;
	uint param_count;
	uint param_start_index;
	uint flag; //Maybe use for texture transparency
	uint unknown1;
	uint unknown2; //Always 0
	uint unknown3; //Always 0

	bool operator()() {
		return unknown2 == 0 && unknown2 == 0;
	}
};

struct BoneHeader {
	Vec3 translation;
	uint filename_offset;
	Vec3 euler_radian;
	ushort parent_index;
	ushort first_child_index;
	Vec3 scale;
	ushort first_sibling_index;
	ushort copy_of_index;
	Vec3 bounder_lower;
	ushort is_nub; //Always 0
	ushort unknown1; //Always 0
	Vec3 bounder_upper;
	ushort unknown2; //Always 0
	ushort unknown3; //Always 0
	uint unknown4[12]; //Always 0

	bool operator()() {
		return is_nub == 0
			&& unknown1 == 0
			&& unknown2 == 0
			&& unknown3 == 0
			&& std::all_of(unknown4, unknown4 + 12, [](const uint& a) { return a == 0; });
	}
};

struct FaceSetHeader {
	uint flag; //0x00=Normal, 0x01/0x02/0x04/0x08=Not Visible, 0x10=Normal?, 0x80="Reptile" Transparency
	ubyte topology; //Always 0, 0 => triangles, 1 => strip
	ubyte cull_backface; //0 || 1
	ubyte unknown1;
	ubyte unknown2; //Always 0 
	uint index_count;
	uint index_buffer_offset;
	uint index_buffer_size;
	uint unknown3; //Always 0;
	uint unknown4; //Always 0;
	uint unknown5; //Always 0; 

	bool operator()() {
		//Log::info("unknown1: ", (uint)unknown1);
		return index_buffer_size == index_count * 2
			&& topology == 0
			&& (cull_backface == 0 || cull_backface == 1)
			&& unknown2 == 0
			&& unknown3 == 0
			&& unknown4 == 0
			&& unknown5 == 0;
	}
};

struct MeshHeader {
	int is_dynamic;

	uint material_index;
	byte unknown1[8]; // Always 0

	uint default_bone_header_index;
	uint bone_header_indices_count;
	uint unknown2; // Always 0;
	uint bone_header_indices_offset;

	// Most of it is 3.
	// We will not use it because it's in ordered.
	uint faceset_header_indices_count;
	uint faceset_header_indices_offset;

	// Most of it is 1.
	// We will not use it because it's in ordered.
	uint vertex_header_indices_count;
	uint vertex_header_indices_offset;
	//int old_pos = file.tell();
	//file.seek(vertex_header_count);
	//uint vertex_header_indices[vertex_header_offset];
	//file.seek(old_pos);

	bool operator()() {
		return std::all_of(unknown1, unknown1 + 8, [](const byte& a) {return a == 0; })
			&& unknown2 == 0;
	}
};

struct VertexHeader {

	//The vertex header index in mesh.
	//Most of it is 0 for most meshes just have one vertex header. 
	uint index;
	uint vertex_descriptor_index;
	uint vertex_size;
	uint vertex_count;
	uint unknown2; //Always 0
	uint unknown3; //Always 0
	uint vertex_buffer_size;
	uint vertex_buffer_offset;

	bool operator()() {
		return unknown2 == 0 && unknown3 == 0
		&& vertex_size * vertex_count == vertex_buffer_size;
	}
};

struct StreamDescriptor {
	uint unknown1; //Always 0
	uint offset;

	uint unknown2; //Maybe related to type

	uint data_type;

	//The index in vertex data.
	//Most of it is 0 for every type in vertex data just has one.
	uint index;

	bool operator()() {
		return unknown1 == 0;
	}
};

struct VertexDescriptor {
	uint stream_descriptor_count;
	uint unknown1; //Always 0
	uint unknown2; //Always 0
	uint offset;

	//int old_pos = file.tell();
	//file.seek(offset);
	//uint stream_descriptors[stream_descriptor_count];
	//file.seek(old_pos);

	bool operator()() {
		return unknown1 == 0 && unknown2 == 0;
	}
};

struct MaterialParameter {
	uint filename_offset;
	uint type_name_offset;
	union { uint uint_type; float float_type; } unknown1; //Most of it is 1.f
	union { uint uint_type; float float_type; } unknown2; //Most of it is 1.f
	uint unknown3; //Some sort of flags
	uint unknown4[3]; //Always 0

	bool operator()() {
		//if (unknown1.float_type != 1.f) Log::info("mat_params.unknown1 is ", unknown1.float_type);
		//if (unknown2.float_type != 1.f) Log::info("mat_params.unknown2 is ", unknown2.float_type);
		return (unknown1.uint_type & 0XFFFF) == 0
			&& (unknown2.uint_type & 0XFFFF) == 0
			&& unknown4[0] == 0
			&& unknown4[1] == 0
			&& unknown4[2] == 0;
	}
};

struct FlverHeader {
	byte signature[6]; //FLVER
	byte endian[2]; //L => little endian
	ushort version_minor;
	ushort version_major;
	
	uint data_offset;
	uint data_size;

	uint hitbox_header_count;
	uint material_header_count;
	uint bone_header_count;
	uint mesh_header_count;
	uint vertex_header_count;

	Vec3 bounder_lower; //Maybe
	Vec3 bounder_upper; //Maybe

	uint unknown1;  //Optional? Setting to 0 doesn't seem to do anything!
	uint unknown2;  //Optional? Setting to 0 doesn't seem to do anything!
	uint unknown3;  //Setting to 0 makes weapon invisible
	uint unknown4;

	uint faceset_header_count;
	uint vertex_descriptor_count;
	uint material_param_count;

	uint unknown5[9]; //Always 1 or 0

	bool operator()() {
		//if (!std::all_of(unknown5 + 1, unknown5 + 9, [](const uint& a) { return a == 0; }))
		//	Log::info("flver_header.unknown5 may be not correct.");
		return unknown4 == 0 && std::all_of(unknown5, unknown5 + 9, [](const uint& a) { return a == 0 || a == 1; });
	}
};

struct VertexInfo {
	VertexDescriptor vertex_descriptor;
	StreamDescriptor[] stream_descriptors;
};

struct VertexData {
	//Maybe all data have just one or zero
	//unknown2: 0X02, data_type: 0X00, index: 0, data size: 12
	Vec3 position; //position

	//unknown2: 0X13, data_type: 0X01, index: 0, data size: 04
	Byte4 data_1;
	//unknown2: 0X11, data_type: 0X02, index: 0, data size: 04
	Byte4 data_2;
	//unknown2: 0X11, data_type: 0X03, index: 0, data size: 04
	Byte4 data_3;

	//unknown2: 0X15, data_type: 0X05, index: 0, data size: 04
	//unknown2: 0X15, data_type: 0X05, index: 1, data size: 04
	//unknown2: 0X13, data_type: 0X05, index: 2, data size: 04
	//unknown2: 0X13, data_type: 0X05, index: 3, data size: 04
	Vec2 diffuse_uv[4]; //Most of it just has one

	//unknown2: 0X11, data_type: 0X06, index: 0, data size: 04
	//unknown2: 0X11, data_type: 0X06, index: 1, data size: 04
	Byte4 data_6[2];
	//unknown2: 0X13, data_type: 0X0A, index: 0, data size: 04
	//unknown2: 0X13, data_type: 0X0A, index: 1, data size: 04
	//unknown2: 0X13, data_type: 0X0A, index: 2, data size: 04
	Byte4 data_A[3];

	//std::vector<BoneIndices> bone_indices; // 0X11
	//std::vector<PackedNormal> normals; // 0X13 => type & 0X3 => data_type
	//std::vector<PackedTangent> bitangents; // 0X13 => type & 0X6 => data_type
	//std::vector<Color> colors; // 0X13 => type & 0XA => data_type
	//std::vector<Vec2> lightmap_uvs; // 0X16
	//std::vector<BoneWeights> bone_weights; // 0X1A
};

## The Header

FlverHeader flver_header;

HitBox[flver_header.hit_box_count] hit_boxes;

MaterialHeader[flver_header.material_count] mat_headers;

BoneHeader[flver_header.bone_count] bone_headers;

MeshHeader[flver_header.mesh_count] mesh_headers;

FaceSetHeader[flver_header.faceset_count] faceset_headers;
// Almost each faceset_header will be used just once.
// size_t all_faceset_count = 0;
// for(mesh_header in mesh_headers) {
// 	all_faceset_count += mesh_header.faceset_count;
// }
// assert(all_faceset_count == flver_header.faceset_count);

VertexHeader[flver_header.vertex_header_count] vertex_headers;
// Almost each vertex_header will be used just once.
// size_t all_vertex_header_count = 0;
// for(mesh_header in mesh_headers) {
// 	all_vertex_header_count += mesh_header.vertex_header_count;
// }
// assert(all_vertex_header_count == flver_header.vertex_header_count);

VertexDescriptor[flver_header.vertex_descriptor_count] vertex_descriptors;

MaterialParameter[flver_header.material_param_count] mat_params;

// From here on, everything is self-seeking
## The Indices and Some Messages

// Note: the index of vertex_descriptors == the index of vertex_infos
VertexInfo[] vertex_infos;
for(vertex_descriptor : vertex_descriptors) {
	reader.seek(vertex_descriptor.offset);
	StreamDescriptor[vertex_descriptor.stream_descriptor_count] stream_descriptors;

	vertex_infos.push_back({ vertex_descriptor, stream_descriptors });
}
// StreamDescriptors are continuous storage
// So maybe you can
// reader.seek(vertex_descriptor[0].offset);
// for(vertex_descriptor : vertex_descriptors) {
// 	StreamDescriptor[vertex_descriptor.stream_descriptor_count] stream_descriptors;
// }

for(mesh_header : mesh_headers) {
	reader.seek(mesh_header.bone_indices_offset);
	uint[mesh_header.bone_index_count] bone_indices;

	reader.seek(mesh_header.faceset_offset);
	uint[mesh_header.faceset_count] faceset_indices;

	reader.seek(mesh_header.vertex_header_offset);
	uint[mesh_header.vertex_header_count] vertex_header_indices;
}
// Indices of each type are continuous storage
// So maybe you can
// reader.seek(mesh_header[0].bone_indices_offset);
// for(mesh_header : mesh_headers) {
// 	uint[mesh_header.bone_index_count] bone_indices;
// }
// reader.seek(mesh_header[0].faceset_offset);
// for(mesh_header : mesh_headers) {
// 	uint[mesh_header.faceset_count] faceset_indices;
// }
// reader.seek(mesh_header[0].vertex_header_offset);
// for(mesh_header : mesh_headers) {
// 	uint[mesh_header.vertex_header_count] vertex_header_indices;
// }

for(mat_header : mat_headers) {
	reader.seek(mat_header.mtl_name_offset);
	wstring mtl_name; //wstring: two byte for one character
	reader.seek(mat_header.mtd_name_offset);
	wstring mtd_name;
}

for(mat_param : mat_params) {
	reader.seek(mat_param.filename_offset);
	wstring file_name;
	reader.seek(mat_param.type_name_offset);
	wstring type_name;
}

## The Data

for(faceset_header : faceset_headers) {
	reader.seek(flver_header.data_offset + faceset_header.index_buffer_offset);
	ushort[faceset_header.index_count] faceset_indices;
}

for(vertex_info : vertex_infos) {
	for(uint i = 0; i < vertex_info.vertex_descriptor.vertex_count; ++i) {
		VertexData data;
		for (const auto& stream : vertex_info.stream_descriptors) {
			switch (stream.data_type)
			{
			case 0X00:
				data.position = reader.readType<Vec3>();
				break;
			case 0X01:
				data.data_1 = reader.readType<Byte4>();
				break;
			case 0X02:
				data.data_2 = reader.readType<Byte4>();
				break;
			case 0X03:
				data.data_3 = reader.readType<Byte4>();
				break;
			case 0X05:
				data.diffuse_uv[stream.index] = reader.readType<Vec2>();
				break;
			case 0x06:
				data.data_6[stream.index] = reader.readType<Byte4>();
				break;
			case 0X0A:
				data.data_A[stream.index] = reader.readType<Byte4>();
				break;
			default:
				assert(false);
				break;
			}
	}
}
